---
title: "Comparing MLB Run Value and Awards"
author: "Andrew Eross, Owen Wassel, Nick McConnell"
format: pdf
---

# Introduction

Baseball has always been called "America's Pastime." However, beginning in the end of the 20th century and the early 2000's, the evolution of baseball analytics has greatly evolved the game. In the past, baseball people had just looked at offensive stats such as batting average, home runs, RBI, and strikeouts. But with the ability to track more and more data related to baseball, new stats have been developed to analyze and evaluate teams and players.

Many attribute the "Moneyball A's" as being a source renaissance for baseball analytics, where the early 2000's Oakland Athetics focused their roster building and talent acquisition by evaluating players on less popular statistics such as OBP (on base percentage), an effective way to acquire impact players who were overlooked by other teams. However, this age has now past, and new numbers drive baseball decision making.

MLB introduced Statcast in 2016, which, from the MLB website, is described as the "state-of-the-art tracking technology that allows for the collection and analysis of a massive amount of baseball data" through means such as cameras, radars, and other tracking devices. This data is accessible on Baseball Savant (an MLB licensed website). Baseball Savant takes these observations and calculates statistics related to how well players move and how balls are hit or thrown by players based on their spin, direction, and velocity. Some well-known Baseball Savant stats are hard-hit rates (how often a player hits a ball well) and xBA (the expected batting average of a player given how well they hit the ball).

The statistic we would like to analyze is Baseball Savant's run value, described on their website: "Every pitch is assigned a run value based on its outcome (ball, strike, home run, etc.). The sum of all of a player's contributions across a season, or multiple seasons, measures his overall batting or pitching run value. A positive value represents runs created for hitters, and runs prevented for pitchers." We are just looking at offensive run value, so how many runs hitters supposedly create at the plate (not including base running). This run value calculation is all "theoretical" meaning it is not derived by summing all the runs that score as a result of a hitter's plate appearance, rather how many *should* score based on how well they hit the ball, neutralizing factors such as opponent defense and teammate base running.

The calculation for run value is also not public. We have an idea of what data should be included in its derivation (such as on base percentage, home runs, etc), but Baseball Savant hides its exact calculation (or else others would copy its formula). Our report also includes research on estimating the weights of counting stats on run value, so seeing what stats might influence its calculation the most.

Run value is also calculated in each part of a hitter's zone. Depending on where the ball was pitched to the hitter, the associated run value may be attributed to the hitter's zone, shadow, chase, or waste run value. The image below shows where each of these zones are relative to the strike zone, as we will create visuals to compare hitters in different parts of the zone. 

ENTER IMAGE

## Research Questions

The reason why we want to use run value is to estimate the impact of a player's run value on their likelihood of winning an award. We would like to answer the following questions:

  * 1.) Are the best offensive players (in terms of run value) more likely to finish atop the MVP (most valuable player) voting?
  * 2.) Are other statistics (like WAR) a better predictor of who will place higher for MLB awards?
  * 3.) How does this change when we analyze an award like Silver Slugger, an award that disregards defense and base running?
  
  ENTER MORE
  
# Data Provenance

As mentioned above, our *primary data set* is the run value data that comes from Baseball Savant, an official MLB website. However, we are also pulling the data from Baseball Reference, another online, reputable and accurate site to get the award voting data. This is our *secondary data set* and also includes many of the averages and counting stats that go with vote receivers. It is also worth noting that we are pulling this data from the 2019 season (just the regular season, not including playoffs). The reason for this was because this year was considered the "juiced ball year" meaning the physical baseball had extra bounce. This meant that the ball would bounce better off the bat and carry longer distances, helping hitters. Overall batting averages and runs scored were a relative high in 2019, meaning we have ample offensive data to draw from in a year known for its offense. Choosing any other year should reach similar conclusions (except for 2020 perhaps, where teams only played 60 games instead of 162).

## Primary Data Set

* Source: Baseball Savant
* Description: display batter's run value data, calculated through Statcast measurables.
* Purpose: estimate a hitter's offensve imopact measured by calculating runs created.
* Cases: rows are hitters, colunmns have run value data overall and in each zone.

## Secondary Data Set

* Source: Baseball Reference
* Description: displays award votes, who won each award, and basic statistics on these players.
* Purpose: give a basic description of a player's stats and where they finished for an award.
* Cases: rows are players who received votes for an award.
* Note: may include several tables from the same site depending on the award/conference of the player.

## Data Wrangling

Because we are pulling the data from multiple data sources and combining into other data frames, several data wrangling steps must be taken. We downloaded all of the Baseball Savant run value and Baseball Reference voting data. Some important steps/ideas in the data wrangling process were as followed:

### Headers

Extract the headers separately from the Baseball Reference cases. This ensures later we can better tidy the data by combining a separate header data frame to the rest of the data frame.

### Tidying

In each table, make sure that column names/data are consistent. The way names appeared were different in both, so it was useful to separate names in a first and last name column. Also, rename columns to relevant, understandable names. It was also important to rename any values that contained accents, as loading the data frame would mess up those cell's formatting.

### Filtering

It is important to filter out all of the pitchers who received award votes since they do not carry meaningful offensive data. We are just comparing hitters with their voting results.

### Merging

An inner join was necessary on First_Name, Last_Name to combine the data frames to include run value data with voting data. Since we only wanted data on those receiving votes, only run vale data would be added to the names in the voting data frame.

## Reproducibility

This process should be reproducible since it had to be repeated for data frame in both conferences. Avoiding "hard-coding" ensures that we are able to quickly change our code to produce other data frames.

# FAIR Principles

Our data set must follow the FAIR principles so to ensure our data is trustworthy and valid to use.

## Findable

Both data sets come from very well known baseball data pages. A quick google search of run value and 2019 award voting will take a user to these online data sets.

## Accessible

Downloading the data is made very easy via the tables' settings/options on the website. This allows us to easily upload the data to our repo for our use.

## Interoperable

For the most part, column names were very easy to understand what data came with it, and if not, we renamed those columns. The .csv files we downloaded from the sites were very easy to read into an R file, and understandable once doing so.

## Reusable

Detailing our process should make the wrangling and EDA very reproducible for other researchers. There is adequate information on the structures of the data sets both in our documentation and from the website so other can use them for their own research.

# CARE Principles

In most cases, analyzing professional sports data follows CARE principles because it is objective analysis on public data meant to study the highlights of the sport. Our research does so, uplifting the positives and accomplishments of baseball measurables. We understad we do not own any of these public data sets, and we provide proper reference information

# Exploratory Data Analysis

```{r}
#| echo: false
#| warning: false
#| message: false

library(tidyverse)
library(ggplot2)

RVData <- read.table(
  file = "~/Documents/GitHub/MLB_Awards_Project/2019-batters.csv", 
  sep =",",
  header = TRUE) %>%
  separate(last_name..first_name, into = c("Last_Name", "First_Name"), sep = ", ")

Raw_NL_MVP <- read.table(
  file = "~/Documents/GitHub/MLB_Awards_Project/2019NLMVP.csv",
  header = FALSE,
  sep = ",",
)
NL_MVP_Header <- read.table(
  file = "~/Documents/GitHub/MLB_Awards_Project/2019NLMVP.csv",
  header = FALSE,
  sep = ",",
  skip = 1,
  nrows = 1
)
NL_MVP <- read.table(
  file = "~/Documents/GitHub/MLB_Awards_Project/2019NLMVP.csv",
  header = FALSE,
  sep = ",",
  skip = 2,
  col.names = as.character(unlist(NL_MVP_Header))
) %>%
  select(1:19) %>%
  filter(AB > 100) %>%
  separate(Name, into = c("First_Name", "Last_Name"), sep = " ") %>%
  mutate(Last_Name = ifelse(Last_Name == "SuÃ¡rez", "Suárez", Last_Name)) %>%
  mutate(Last_Name = ifelse(Last_Name == "AcuÃ±a", "Acuña Jr.", Last_Name)) %>%
  rename('1st.Place.Votes' = X1st.Place) %>%
  inner_join(RVData, by = c("First_Name", "Last_Name")) %>%
  select(-player_id, -year, -pitches, -team_id)
```

```{r}
#| echo: false
#| warning: false
#| message: false

ggplot(NL_MVP, aes(x = runs_all, y = Vote.Pts, label = paste(First_Name, Last_Name))) +
  geom_point(color = "#FF474C", size = 3) +                
  geom_text(vjust = -0.5, hjust = 0.5, size = 3) +
  geom_smooth(method = "lm", se = FALSE, color = "gray") +
  labs(
    title = "NL MVP Vote Points vs Offensive Run Value",
    x = "Offensive Run Value (All)",
    y = "NL MVP Vote Points"
  ) +
  theme_minimal()

model_nlmvp_rv <- lm(Vote.Pts ~ runs_all, data = NL_MVP)
rsq_nlmvp_rv<- summary(model_nlmvp_rv)$r.squared
print(rsq_nlmvp_rv)

```
```{r}
#| echo: false
#| warning: false
#| message: false

ggplot(NL_MVP, aes(x = WAR, y = Vote.Pts, label = paste(First_Name, Last_Name))) +
  geom_point(color = "#87CEEB", size = 3) +                 # Plot points
  geom_text(vjust = -0.5, hjust = 0.5, size = 3) +
  geom_smooth(method = "lm", se = FALSE, color = "gray") +
  labs(
    title = "NL MVP Vote Points vs WAR",
    x = "WAR",
    y = "NL MVP Vote Points"
  ) +
  theme_minimal()

model_nlmvp_war <- lm(Vote.Pts ~ WAR, data = NL_MVP)
rsq_nlmvp_war<- summary(model_nlmvp_war)$r.squared
print(rsq_nlmvp_war)


```

```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
library(ggplot2)

RVData <- read.table(
  file = "~/Documents/GitHub/MLB_Awards_Project/2019-batters.csv", 
  sep =",",
  header = TRUE) %>%
  separate(last_name..first_name, into = c("Last_Name", "First_Name"), sep = ", ")

Raw_AL_MVP <- read.table(
  file = "~/Documents/GitHub/MLB_Awards_Project/2019ALMVP.xls.csv",
  header = FALSE,
  sep = ",",
)
AL_MVP_Header <- read.table(
  file = "~/Documents/GitHub/MLB_Awards_Project/2019ALMVP.xls.csv",
  header = FALSE,
  sep = ",",
  skip = 1,
  nrows = 1
)
AL_MVP <- read.table(
  file = "~/Documents/GitHub/MLB_Awards_Project/2019ALMVP.xls.csv",
  header = FALSE,
  sep = ",",
  skip = 2,
  col.names = as.character(unlist(AL_MVP_Header))
) %>%
  select(1:19) %>%
  filter(AB > 100) %>%
  separate(Name, into = c("First_Name", "Last_Name"), sep = " ") %>%
  mutate(First_Name = ifelse(First_Name == "JosÃ©", "José", First_Name)) %>%
  mutate(First_Name = ifelse(First_Name == "YoÃ¡n", "Yoán", First_Name)) %>%
  rename('1st.Place.Votes' = X1st.Place) %>%
  inner_join(RVData, by = c("First_Name", "Last_Name")) %>%
  select(-player_id, -year, -pitches, -team_id)
```

```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
library(ggplot2)

ggplot(AL_MVP, aes(x = runs_all, y = Vote.Pts, label = paste(First_Name, Last_Name))) +
  geom_point(color = "#FF474C", size = 3) +                
  geom_text(vjust = -0.5, hjust = 0.5, size = 3) +
  geom_smooth(method = "lm", se = FALSE, color = "gray") +
  labs(
    title = "AL MVP Vote Points vs Offensive Run Value",
    x = "Offensive Run Value (All)",
    y = "AL MVP Vote Points"
  ) +
  theme_minimal()

model_almvp_rv <- lm(Vote.Pts ~ runs_all, data = AL_MVP)
rsq_almvp_rv<- summary(model_almvp_rv)$r.squared
print(rsq_almvp_rv)
```

```{r}
#| echo: false
#| warning: false
#| message: false
library(tidyverse)
library(ggplot2)

ggplot(AL_MVP, aes(x = WAR, y = Vote.Pts, label = paste(First_Name, Last_Name))) +
  geom_point(color = "#B0E0E6", size = 3) +                 
  geom_text(vjust = -0.5, hjust = 0.5, size = 3) +
  geom_smooth(method = "lm", se = FALSE, color = "gray") +
  labs(
    title = "AL MVP Vote Points vs WAR",
    x = "WAR",
    y = "AL MVP Vote Points"
  ) +
  theme_minimal()

model_almvp_war <- lm(Vote.Pts ~ WAR, data = AL_MVP)
rsq_almvp_war<- summary(model_almvp_war)$r.squared
print(rsq_almvp_war)
```

```{r}
#| echo: false
#| warning: false
#| message: false


library(reshape2)

MVP_Hitters <- rbind(AL_MVP, NL_MVP) %>%
  select(-Rank)

rows <- c("WAR", "runs_all")
cols <- c("BA", "OBP", "SLG", "OPS", "HR", "RBI")

Correlation_DF <- MVP_Hitters[, c(rows, cols)]

Correlation_Matrix <- cor(Correlation_DF, use = "complete.obs")

Correlation_Subset <- Correlation_Matrix[rows, cols]

Correlation_Long <- melt(Correlation_Subset)

ggplot(Correlation_Long, aes(x = Var2, y = Var1, fill = value)) +
  geom_tile(color = "white") +
  scale_fill_gradient2(low = "blue", high = "red", mid = "white",
                       midpoint = 0, limit = c(-1, 1),
                       name = "Correlation") +
  geom_text(aes(label = round(value, 2)), color = "black", size = 4) +
  theme_minimal() +
  labs(x = "", y = "", title = "WAR and Run Value vs Vote Getter Stats") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```



